package com.fitness.tracker.dao;import com.fitness.tracker.config.DatabaseConfig;import com.fitness.tracker.model.Client;import com.fitness.tracker.model.Coach;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;public class CoachDAO {    public void registerCoach(Coach coach) throws SQLException {        String sql = "INSERT INTO Coach (username, password) VALUES (?, ?)";        try (Connection connection = DatabaseConfig.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            preparedStatement.setString(1, coach.getUsername());            preparedStatement.setString(2, coach.getPassword());            preparedStatement.executeUpdate();        }    }    public Coach loginCoach(String username, String password) throws SQLException {        String sql = "SELECT * FROM Coach WHERE username = ? AND password = ?";        try (Connection connection = DatabaseConfig.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            preparedStatement.setString(1, username);            preparedStatement.setString(2, password);            ResultSet resultSet = preparedStatement.executeQuery();            if (resultSet.next()) {                return new Coach(                        resultSet.getInt("coach_id"),                        resultSet.getString("username"),                        resultSet.getString("password")                );            } else {                throw new RuntimeException("Invalid credentials");            }        }    }    public void viewPrograms(int coachId) throws SQLException {        String sql = "SELECT program_id, program_name, description, min_age, max_age, min_weight, max_weight, min_height, max_height, min_bmi, max_bmi, price, duration_in_weeks, created_at FROM fitnessprogram WHERE coach_id = ?";        try (Connection connection = DatabaseConfig.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            preparedStatement.setInt(1, coachId);            ResultSet resultSet = preparedStatement.executeQuery();            while (resultSet.next()) {                int programId = resultSet.getInt("program_id");                String programName = resultSet.getString("program_name");                String description = resultSet.getString("description");                int minAge = resultSet.getInt("min_age");                int maxAge = resultSet.getInt("max_age");                double minWeight = resultSet.getDouble("min_weight");                double maxWeight = resultSet.getDouble("max_weight");                double minHeight = resultSet.getDouble("min_height");                double maxHeight = resultSet.getDouble("max_height");                double minBmi = resultSet.getDouble("min_bmi");                double maxBmi = resultSet.getDouble("max_bmi");                double price = resultSet.getDouble("price");                int duration = resultSet.getInt("duration_in_weeks");                String createdAt = resultSet.getString("created_at");                System.out.println("Program ID: " + programId);                System.out.println("Program Name: " + programName);                System.out.println("Description: " + description);                System.out.println("Age Range: " + minAge + " - " + maxAge);                System.out.println("Weight Range: " + minWeight + " - " + maxWeight + " kg");                System.out.println("Height Range: " + minHeight + " - " + maxHeight + " cm");                System.out.println("BMI Range: " + String.format("%.2f", minBmi) + " - " + String.format("%.2f", maxBmi));                System.out.println("Price: $" + String.format("%.2f", price));                System.out.println("Duration: " + duration + " weeks");                System.out.println("Created At: " + createdAt);                System.out.println("----------------------------------------");            }        }    }    public void approveRequest(int coachId, int requestId) throws SQLException {        String sql = "UPDATE programapplication SET status = 'Approved' WHERE application_id = ? AND program_id IN (SELECT program_id FROM fitnessprogram WHERE coach_id = ?)";        try (Connection connection = DatabaseConfig.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            preparedStatement.setInt(1, requestId);            preparedStatement.setInt(2, coachId);            preparedStatement.executeUpdate();        }    }    public void viewAllRequests(int coachId) throws SQLException {        String sql = "SELECT * FROM programapplication WHERE program_id IN (SELECT program_id FROM fitnessprogram WHERE coach_id = ?)";        try (Connection connection = DatabaseConfig.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            preparedStatement.setInt(1, coachId);            ResultSet resultSet = preparedStatement.executeQuery();            while (resultSet.next()) {                System.out.println("Request ID: " + resultSet.getInt("application_id"));                System.out.println("Client ID: " + resultSet.getInt("client_id"));                System.out.println("Program ID: " + resultSet.getInt("program_id"));                System.out.println("Status: " + resultSet.getString("status"));                System.out.println("------------------------");            }        }    }    public void createProgram(int coachId, String name, String description, int minAge, int maxAge, double minWeight, double maxWeight, double minHeight, double maxHeight, double price, int duration) throws SQLException {        String sql = "INSERT INTO fitnessprogram (coach_id, program_name, description, min_age, max_age, min_weight, max_weight, min_height, max_height, price, duration_in_weeks, created_at) " +                "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)";        try (Connection connection = DatabaseConfig.getConnection();             PreparedStatement preparedStatement = connection.prepareStatement(sql)) {            preparedStatement.setInt(1, coachId);            preparedStatement.setString(2, name);            preparedStatement.setString(3, description);            preparedStatement.setInt(4, minAge);            preparedStatement.setInt(5, maxAge);            preparedStatement.setDouble(6, minWeight);            preparedStatement.setDouble(7, maxWeight);            preparedStatement.setDouble(8, minHeight);            preparedStatement.setDouble(9, maxHeight);            preparedStatement.setDouble(10, price);            preparedStatement.setInt(11, duration);            preparedStatement.executeUpdate();        }    }}